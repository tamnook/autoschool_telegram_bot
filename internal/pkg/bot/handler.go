package bot

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/google/uuid"
	"github.com/mymmrac/telego"
	"github.com/mymmrac/telego/telegoutil"
	"github.com/samber/lo"
	"github.com/tamnook/autoschool_telegram_bot/internal/pkg/entity"
)

var (
	student = entity.Student{}
)

func MainMenu() *telego.ReplyKeyboardMarkup {
	return &telego.ReplyKeyboardMarkup{
		Keyboard: [][]telego.KeyboardButton{
			{{Text: "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"}},
			{{Text: "üìû –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"}, {Text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}},
		},
		ResizeKeyboard: true,
	}
}
func (b *bot) startHandler(ctx context.Context, bot *telego.Bot, update telego.Update) {
	b.cache.InitStudentsCache(ctx, update.Message.Chat.ID)
	student = b.cache.GetStudentCache(update.Message.Chat.ID)
	fmt.Println(student)
	if lo.FromPtr(student.FullName) == "" || lo.FromPtr(student.Phone) == "" {
		text := "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–•):"
		if lo.FromPtr(student.FullName) == "" {
			text = "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)"
		}
		_, _ = bot.SendMessage(telegoutil.MessageWithEntities(
			telegoutil.ID(update.Message.Chat.ID),
			telegoutil.Entity("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—Éüöò"+"\n"+text),
		))
	} else {
		_, _ = bot.SendMessage(telegoutil.MessageWithEntities(
			telegoutil.ID(update.Message.Chat.ID),
			telegoutil.Entity("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—à–∫–æ–ª—Éüöò \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"),
		).WithReplyMarkup(MainMenu()))
	}
}

func (b *bot) validateInput(ctx context.Context, bot *telego.Bot, update telego.Update) {
	chatID := update.Message.Chat.ChatID()
	text := update.Message.Text
	ID := uuid.New()
	if lo.FromPtr(student.FullName) == "" {
		if isValidFullName(text) {
			err := b.repo.SaveFullNameStudent(ctx, entity.Student{ID: ID, FullName: lo.ToPtr(text), TelegramChatID: chatID.ID, TelegramUserName: lo.ToPtr(update.Message.Chat.Username)})
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
				return
			}
			student.FullName = lo.ToPtr(text)
			b.cache.SetStudentCache(student)
			_, _ = bot.SendMessage(telegoutil.Message(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–•):"))
		} else {
			_, _ = bot.SendMessage(telegoutil.Message(chatID, "‚ùå –§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		}
	} else if lo.FromPtr(student.Phone) == "" {
		if isValidPhoneNumber(text) {
			err := b.repo.SavePhoneStudent(ctx, entity.Student{ID: ID, Phone: lo.ToPtr(text), TelegramChatID: chatID.ID, TelegramUserName: lo.ToPtr(update.Message.Chat.Username)})
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
				return
			}
			student.Phone = lo.ToPtr(text)
			_, _ = bot.SendMessage(telegoutil.Message(chatID, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))
			b.cache.InitStudentsCache(ctx, update.Message.Chat.ID)
			b.startHandler(ctx, bot, update)
		} else {
			_, _ = bot.SendMessage(telegoutil.Message(chatID, "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."))
		}
	} else {
		_, _ = bot.SendMessage(telegoutil.MessageWithEntities(
			telegoutil.ID(update.Message.Chat.ID),
			telegoutil.Entity("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é."),
		).WithReplyMarkup(MainMenu()))
	}
}
func (b *bot) sendFAQMenuHandler(ctx context.Context, bot *telego.Bot, update telego.Update) {
	chatID := update.Message.Chat.ChatID()
	faqStruct := b.cache.GetAllFAQCache()

	var buttons [][]telego.InlineKeyboardButton
	for _, item := range faqStruct {
		button := telegoutil.InlineKeyboardRow(telegoutil.InlineKeyboardButton(item.Question).WithCallbackData(fmt.Sprintf("faq_%d", item.Id)))
		buttons = append(buttons, button)
	}
	keyboard := telegoutil.InlineKeyboardGrid(buttons)

	msg := telegoutil.Message(chatID, "üìå *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:").
		WithParseMode(telego.ModeMarkdown).
		WithReplyMarkup(keyboard)

	_, _ = bot.SendMessage(msg)
}

// –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
func (b *bot) sendManagerContact(ctx context.Context, bot *telego.Bot, update telego.Update) {
	chatID := update.Message.Chat.ChatID()
	_, _ = bot.SendMessage(telegoutil.Message(chatID, "‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: +7 900 123 45 67"))
}

func (b *bot) handleMessage(ctx context.Context, bot *telego.Bot, update telego.Update) {
	student = b.cache.GetStudentCache(update.Message.Chat.ID)
	if student == (entity.Student{}) {
		chatID := update.Message.Chat.ChatID()
		ID := uuid.New()
		err := b.repo.CreateStudent(ctx, entity.Student{ID: ID, TelegramChatID: chatID.ID, TelegramUserName: lo.ToPtr(update.Message.Chat.Username)})
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: %v", err)
			return
		}
	}

	switch update.Message.Text {
	case "/start":
		b.startHandler(ctx, bot, update)
	case "üìö –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
		b.sendFAQMenuHandler(ctx, bot, update)
	case "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
		b.sendManagerContact(ctx, bot, update)
	// case "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
	// 	sendSchedule(bot, update.Message.Chat.ID)
	// case "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
	// 	sendNotifications(bot, update.Message.Chat.ID)
	default:
		b.validateInput(ctx, bot, update)
	}
}

func (b *bot) handleCallback(_ context.Context, bot *telego.Bot, callbackQuery *telego.CallbackQuery) {
	fmt.Println(callbackQuery.Message.GetChat())
	chatID := telego.ChatID{ID: callbackQuery.Message.GetChat().ID, Username: callbackQuery.Message.GetChat().Username}
	if strings.HasPrefix(callbackQuery.Data, "faq_") {
		id, err := strconv.Atoi(strings.TrimPrefix(callbackQuery.Data, "faq_"))
		if err != nil {
			bot.SendMessage(telegoutil.Message(callbackQuery.Message.GetChat().PersonalChat.ChatID(), "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."))
			return
		}
		answer, err := b.cache.GetFAQCache(int64(id)).Answer, nil
		if err != nil {
			bot.SendMessage(telegoutil.Message(chatID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞."))
			return
		}

		fmt.Println("–û—Ç–≤–µ—Ç: " + answer)
		editMsg := telegoutil.Message(chatID, answer).
			WithParseMode(telego.ModeMarkdown)

		_, _ = bot.EditMessageText(&telego.EditMessageTextParams{
			ChatID:    chatID,
			MessageID: callbackQuery.Message.GetMessageID(),
			Text:      editMsg.Text,
			ParseMode: editMsg.ParseMode,
		})
	}
}

func isValidFullName(fullName string) bool {
	fullName = strings.TrimSpace(fullName)
	matched, _ := regexp.MatchString(`^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$`, fullName)
	return matched
}

func isValidPhoneNumber(phone string) bool {
	matched, _ := regexp.MatchString(`^\+7\d{10}$`, phone)
	return matched
}
